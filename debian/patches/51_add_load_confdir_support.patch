From 830cee5ac0dd1e9611cc85dd0df99a90aee96503 Mon Sep 17 00:00:00 2001
From: Guillem Jover <guillem@hadrons.org>
Date: Sun, 6 Dec 2009 06:09:32 +0100
Subject: [PATCH] Add support for syslogd configuration files directory

This allows external programs to drop a configuration file in the
directory and avoid the need to edit the main configuraion file.

* doc/inetutils.texi: Document new -D and --rcdir syslogd options.
* paths (PATH_LOGCONFD): New variable.
* syslogd/Makefile.am (AM_CPPFLAGS): Add PATHDEF_LOGCONFD.
* syslogd/syslogd.c: Include <dirent.h>.
(ConfDir): New variable.
(load_confdir): New function declaration.
(argp_options): Add rcdir entry.
(parse_opt): Handle 'D' option.
(load_confdir): New function definition.
(init): Call load_confdir instead of load_conffile.
---
 doc/inetutils.texi |  6 ++++++
 paths              |  1 +
 src/Makefile.am    |  2 +-
 src/syslogd.c      | 53 ++++++++++++++++++++++++++++++++++++++++++++++++++++-
 4 files changed, 60 insertions(+), 2 deletions(-)

diff --git a/doc/inetutils.texi b/doc/inetutils.texi
index ad7870a..cbf83c4 100644
--- a/doc/inetutils.texi
+++ b/doc/inetutils.texi
@@ -3273,6 +3273,12 @@ syslogd [@var{options}]@dots{}
 @opindex --rcfile
 Override configuration (the default file is @file{/etc/syslog.conf}).
 
+@item -D @var{dir}
+@itemx --rcdir=@var{dir}
+@opindex -D
+@opindex --rcdir
+Override configuration directory (the default is @file{/etc/syslog.d}).
+
 @item --pidfile=@var{file}
 @opindex --pidfile
 Override pidfile (the default file is @file{/var/run/syslogd.pid}).
diff --git a/paths b/paths
index 8a61652..98f65d6 100644
--- a/paths
+++ b/paths
@@ -91,6 +91,7 @@ PATH_LASTLOG	<utmp.h> $(localstatedir)/log/lastlog search:lastlog:/var/log:/var/
 PATH_LOG	<syslog.h> /dev/log
 PATH_KLOG	<syslog.h> /dev/klog no
 PATH_LOGCONF	$(sysconfdir)/syslog.conf
+PATH_LOGCONFD	$(sysconfdir)/syslog.d
 PATH_LOGIN	x $(bindir)/login search:login
 PATH_LOGPID	$(localstatedir)/run/syslog.pid
 PATH_NOLOGIN	$(sysconfdir)/nologin
diff --git a/src/Makefile.am b/src/Makefile.am
index 189df7e..d0078d8 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -27,7 +27,7 @@ AM_CPPFLAGS = \
 	$(PATHDEF_BSHELL) $(PATHDEF_CONSOLE) $(PATHDEF_CP) \
 	$(PATHDEF_DEFPATH) $(PATHDEF_DEV) $(PATHDEF_INETDCONF) \
 	$(PATHDEF_INETDDIR) $(PATHDEF_INETDPID) $(PATHDEF_KLOG) \
-	$(PATHDEF_LOG) $(PATHDEF_LOGCONF) \
+	$(PATHDEF_LOG) $(PATHDEF_LOGCONF) $(PATHDEF_LOGCONFD) \
 	$(PATHDEF_LOGIN) $(PATHDEF_LOGPID) $(PATHDEF_NOLOGIN) \
 	$(PATHDEF_RLOGIN) $(PATHDEF_RSH) $(PATHDEF_TTY) $(PATHDEF_TTY_PFX) \
 	$(PATHDEF_UTMP) $(PATHDEF_UTMPX) $(PATHDEF_UUCICO)
diff --git a/src/syslogd.c b/src/syslogd.c
index 0a4d698..bc41a51 100644
--- a/src/syslogd.c
+++ b/src/syslogd.c
@@ -105,6 +105,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <dirent.h>
 #include <unistd.h>
 
 #include <stdarg.h>
@@ -137,6 +138,7 @@ int facilities_seen;
 char *selector;			/* Program origin to select.  */
 
 const char *ConfFile = PATH_LOGCONF;	/* Default Configuration file.  */
+const char *ConfDir = PATH_LOGCONFD;	/* Default Configuration directory.  */
 const char *PidFile = PATH_LOGPID;	/* Default path to tuck pid.  */
 char ctty[] = PATH_CONSOLE;	/* Default console to send message info.  */
 
@@ -259,6 +261,7 @@ void domark (int);
 void find_inet_port (const char *);
 void fprintlog (struct filed *, const char *, int, const char *);
 static int load_conffile (const char *, struct filed **);
+static void load_confdir (struct filed **);
 void init (int);
 void logerror (const char *);
 void logmsg (int, const char *, const char *, int);
@@ -358,6 +361,8 @@ static struct argp_option argp_options[] = {
   {"rcfile", 'f', "FILE", 0, "override configuration file (default: "
    PATH_LOGCONF ")",
    GRP+1},
+  {"rcdir", 'D', "DIR", 0, "override configuration directory (default: "
+   PATH_LOGCONFD ")", GRP+1},
   {"socket", 'p', "FILE", 0, "override default unix domain socket " PATH_LOG,
    GRP+1},
   {"sync", 'S', NULL, 0, "force a file sync on every line", GRP+1},
@@ -449,6 +454,10 @@ parse_opt (int key, char *arg, struct argp_state *state)
       ConfFile = arg;
       break;
 
+    case 'D':
+      ConfDir = arg;
+      break;
+
     case 'p':
       funix[0].name = arg;
       funix[0].fd = -1;
@@ -1972,6 +1981,48 @@ load_conffile (const char *filename, struct filed **nextp)
   return 1;
 }
 
+static void
+load_confdir (struct filed **nextp)
+{
+  struct dirent *dent;
+  DIR *dir;
+
+  if (!load_conffile (ConfFile, nextp))
+    return;
+
+  dir = opendir (ConfDir);
+  if (dir == NULL)
+    {
+      dbg_printf ("cannot open %s\n", ConfDir);
+      return;
+    }
+
+  while ((dent = readdir (dir)) != NULL)
+    {
+      struct stat st;
+      char *file;
+
+      if (asprintf (&file, "%s/%s", ConfDir, dent->d_name) < 0)
+        {
+          dbg_printf ("cannot allocate space for configuration filename\n");
+          return;
+        }
+
+      if (stat(file, &st) != 0)
+        {
+          dbg_printf ("cannot stat file configuration file\n");
+          continue;
+        }
+
+      if (S_ISREG(st.st_mode))
+        load_conffile(file, nextp);
+
+      free(file);
+    }
+
+  closedir(dir);
+}
+
 /* INIT -- Initialize syslogd from configuration table.  */
 void
 init (int signo _GL_UNUSED_PARAMETER)
@@ -2024,7 +2075,7 @@ init (int signo _GL_UNUSED_PARAMETER)
   /* Foreach line in the conf table, open that file.  */
   f = NULL;
 
-  load_conffile (ConfFile, nextp);
+  load_confdir (nextp);
 
   Initialized = 1;
 
-- 
1.8.3.rc1

